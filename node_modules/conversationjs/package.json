{
  "name": "conversationjs",
  "preferGlobal": true,
  "version": "1.0.0",
  "author": {
    "name": "Muaz Khan",
    "email": "muazkh@gmail.com",
    "url": "http://www.muazkhan.com/"
  },
  "description": "Conversation.js is inspired by skype; and it provides simple events-like API to manage conversations, enable/disable media devices; add/download files; and do anything supported by Skype.",
  "scripts": {
    "start": "node conversation.js"
  },
  "main": "./conversation.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/muaz-khan/Conversation.git"
  },
  "keywords": [
    "webrtc",
    "conversation",
    "conversation.js",
    "conversationjs",
    "rtcmulticonnection",
    "webrtc-library",
    "library",
    "javascript",
    "chrome",
    "firefox",
    "opera",
    "ie",
    "internet-explorer",
    "android",
    "rtcweb",
    "rtcmulticonnection.js",
    "multirtc",
    "webrtc-experiment",
    "javascript-library",
    "muaz",
    "muaz-khan"
  ],
  "analyze": false,
  "license": "MIT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/muaz-khan/Conversation/issues",
    "email": "muazkh@gmail.com"
  },
  "homepage": "https://www.webrtc-experiment.com/Conversationjs/",
  "_id": "conversationjs@1.0.0",
  "_from": "conversationjs@",
  "readme": "## [Conversation.js](https://github.com/muaz-khan/Conversation.js) runs top over [RTCMultiConnection.js](http://www.RTCMultiConnection.org/)  [![npm](https://img.shields.io/npm/v/conversationjs.svg)](https://npmjs.org/package/conversationjs) [![downloads](https://img.shields.io/npm/dm/conversationjs.svg)](https://npmjs.org/package/conversationjs)\r\n\r\nConversation.js is inspired by skype; and it provides simple events-like API to manage conversations, enable/disable media devices; add/download files; and do anything supported by Skype.\r\n\r\nIt allows you open data conversation between two or more users using their user-ids.\r\n\r\nIt is <a href=\"https://www.webrtc-experiment.com/licence/\">MIT Licenced</a>, which means that you can use it in any commercial/non-commercial product, free of cost.\r\n\r\n```\r\nnpm install conversationjs\r\n```\r\n\r\nTo use it:\r\n\r\n```htm\r\n<script src=\"./node_modules/conversationjs/conversation.js\"></script>\r\n```\r\n\r\n## [Demos](https://www.webrtc-experiment.com/Conversationjs/) using [Conversation.js](https://github.com/muaz-khan/Conversation.js)\r\n\r\n<ol>\t\t\t\t\r\n                <li>\r\n\t\t\t\t\t<a href=\"https://www.webrtc-experiment.com/Conversationjs/AndroidRTC/\">AndroidRTC</a>\r\n                </li>\r\n                \r\n                <li>\r\n\t\t\t\t\t<a href=\"https://www.webrtc-experiment.com/Conversationjs/search-user.html\">Search Users</a>\r\n                </li>\r\n                \r\n                <li>\r\n\t\t\t\t\t<a href=\"https://www.webrtc-experiment.com/Conversationjs/cross-language-chat.html\">Cross-Language (Multi-Lingual) Text Chat</a>\r\n                </li>\r\n                \r\n                <li>\r\n                    <a href=\"https://www.rtcmulticonnection.org/conversationjs/demos/\">Old Conversation.js demos</a>\r\n                </li>\r\n</ol>\r\n\r\n## Gif Presentation\r\n\r\n* https://cdn.webrtc-experiment.com/images/AndroidRTC.gif\r\n\r\n## Link the library\r\n\r\n```html\r\n<script src=\"//cdn.webrtc-experiment.com/RTCMultiConnection.js\"></script>\r\n<script src=\"//cdn.webrtc-experiment.com/conversation.js\"></script>\r\n```\r\n\r\n=\r\n\r\n## Open simple conversation between two users\r\n\r\n```javascript\r\nvar websocket = new WebSocket('ws://domain:port/');\r\n\r\n// initializing constructor\r\nvar signaler = new Signaler();\r\n\r\n// whatever sent from conversation.js\r\nsignaler.on('message', function(message) {\r\n    // here, you received message from conversation.js\r\n    // send message over WebSocket connection\r\n    websocket.send(JSON.stringify(message));\r\n});\r\n\r\n// your websocket listener that subscribes\r\n// for all messages broadcasted from WebSockets connection\r\nwebsocket.onmessage = function(event) {\r\n    var message = JSON.parse(event.data);\r\n    \r\n    // here, you received a message from websocket server\r\n    // pass message to conversation.js\r\n    signaler.emit('message', message);\r\n});\r\n\r\nvar user = new User();\r\n\r\n// connect user to signaler\r\nsignaler.connect(user);\r\n\r\n// invoke this method to open conversation with any user\r\nuser.openconversationwith('target-username');\r\n\r\n// this event is fired when conversation is opened\r\nuser.on('conversation-opened', function (conversation) {\r\n    // conversation.targetuser\r\n\r\n    // emit a message to target user\r\n    // conversation.emit('message', 'hello there');\r\n\r\n    conversation.on('message', function (event) {\r\n        console.log(event.username, event.data);\r\n    });\r\n\r\n    // enable your microphone and tell target user about it; he can \r\n    // also enable his microphone or he can simply listen your voice!\r\n    // conversation.emit('enable', 'microphone');\r\n\r\n    conversation.on('media-enabled', function (media) {\r\n        // media.type == 'audio' || 'video' || 'screen'\r\n        // media.hasmicrophone == true || null\r\n        // media.hascamera == true || null\r\n        // media.hasscreen == true || null\r\n        // media.sender == 'string'\r\n        \r\n        media.emit('join-with', 'microphone');\r\n    });\r\n});\r\n```\r\n\r\n## How to use socket.io?\r\n\r\n```javascript\r\nvar socket = io.connect();\r\n\r\n// initializing constructor\r\nvar signaler = new Signaler();\r\n\r\n// whatever sent from conversation.js\r\nsignaler.on('message', function(message) {\r\n    // here, you received message from conversation.js\r\n    // pass/emit message to node.js\r\n    socket.emit('message', message);\r\n});\r\n\r\n// your socket.io listener that subscribes\r\n// for all messages broadcasted from Node.js\r\nsocket.on('message', function(message) {\r\n    // here, you received a message from node.js server\r\n    // pass message to conversation.js\r\n    signaler.emit('message', message);\r\n});\r\n\r\n// connect user to signaler\r\nsignaler.connect(user);\r\n```\r\n\r\n## How to use WebSockets?\r\n\r\n```javascript\r\nvar websocket = new WebSocket('ws://domain:port/');\r\n\r\n// initializing constructor\r\nvar signaler = new Signaler();\r\n\r\n// whatever sent from conversation.js\r\nsignaler.on('message', function(message) {\r\n    // here, you received message from conversation.js\r\n    // send message over WebSocket connection\r\n    websocket.send(JSON.stringify(message));\r\n});\r\n\r\n// your websocket listener that subscribes\r\n// for all messages broadcasted from WebSockets connection\r\nwebsocket.onmessage = function(event) {\r\n    var message = JSON.parse(event.data);\r\n    \r\n    // here, you received a message from websocket server\r\n    // pass message to conversation.js\r\n    signaler.emit('message', message);\r\n});\r\n\r\n// connect user to signaler\r\nsignaler.connect(user);\r\n```\r\n\r\n## How to set defaults?\r\n\r\n\"defaults\" are default properties, objects and methods that are applied to RTCMultiConnection object.\r\n\r\nSee list of all such properties here: http://www.rtcmulticonnection.org/docs/\r\n\r\n```javascript\r\nuser.defaults = {\r\n    log: true, // for production use only.\r\n    trickleIce: true, // for SIP/XMPP and XHR\r\n    getExternalIceServers: false, // ice-servers from xirsys.com\r\n    leaveOnPageUnload: true,\r\n    iceServers: [{\r\n        url: 'stun:stun.l.google.com:19302'\r\n    }],\r\n    iceProtocols: {\r\n        tcp: true,\r\n        udp: true\r\n    },\r\n    candidates: {\r\n        host: true,      // local/host candidates\r\n        reflexive: true, // STUN candidates\r\n        relay: true      // TURN candidates\r\n    },\r\n    autoReDialOnFailure: false, // renegotiation will not work if it is true\r\n    body: document.body || document.documentElement\r\n};\r\n```\r\n\r\n## How to accept/reject friend requests?\r\n\r\n```javascript\r\nuser.on('friend-request', function (request) {\r\n    if (window.confirm('Do you want to accept friend-request made by ' + request.sender + '?')) {\r\n        request.accept();\r\n    } else {\r\n        request.reject();\r\n    }\r\n});\r\n```\r\n\r\n## How to check friend-request status?\r\n\r\n```javascript\r\nuser.on('request-status', function (request) {\r\n    if (request.status == 'accepted') {\r\n        alert(request.sender + ' accepted your request.');\r\n    }\r\n    if (request.status == 'rejected') {\r\n        alert(request.sender + ' rejected your request.');\r\n    }\r\n});\r\n```\r\n\r\n## How to emit events to multiple users?\r\n\r\n```javascript\r\ndocument.querySelector('#chat-message').onchange = function (event) {\r\n    user.peers.emit('message', this.value);\r\n};\r\n\r\ndocument.querySelector('#enable-microphone').onclick = function () {\r\n    user.peers.emit('enable', 'microphone');\r\n};\r\n\r\ndocument.querySelector('#enable-camera').onclick = function () {\r\n    user.peers.emit('enable', 'camera');\r\n};\r\n\r\ndocument.querySelector('#enable-screen').onclick = function () {\r\n    user.peers.emit('enable', 'screen');\r\n};\r\n```\r\n\r\n## How to share files?\r\n\r\n```javascript\r\ndocument.querySelector('input[type=file]').onchange = function () {\r\n    user.peers.emit('add-file', this.files);\r\n};\r\n```\r\n\r\n## How to check if target user added file?\r\n\r\n```javascript\r\nconversation.on('add-file', function (file) {\r\n    file.download();\r\n\r\n    // or file.cancel();\r\n});\r\n```\r\n\r\n## How to check file-download progress?\r\n\r\n```javascript\r\nconversation.on('file-progress', function (progress) {\r\n    console.log('percentage %', progress.percentage);\r\n    // progress.file.name\r\n    // progress.sender\r\n});\r\n```\r\n\r\n## How to save downloaded file to disk?\r\n\r\n```javascript\r\nconversation.on('file-downloaded', function (file) {\r\n    // file.sender\r\n    file.savetodisk();\r\n});\r\n```\r\n\r\n## How to check if file is successfully sent?\r\n\r\n```javascript\r\nconversation.on('file-sent', function (file) {\r\n    // file.sender\r\n    console.log(file.name, 'sent.');\r\n});\r\n```\r\n\r\n## How to check if target user refused to receive your file?\r\n\r\n```javascript\r\nconversation.on('file-cancelled', function (file) {\r\n    // file.sender\r\n    console.log(file.name, 'cancelled.');\r\n});\r\n```\r\n\r\n## Demos\r\n\r\n* https://www.rtcmulticonnection.org/conversationjs/demos/\r\n\r\n## Credits\r\n\r\n[Muaz Khan](https://github.com/muaz-khan):\r\n\r\n1. Personal Webpage: http://www.muazkhan.com\r\n2. Email: muazkh@gmail.com\r\n3. Twitter: https://twitter.com/muazkh and https://twitter.com/WebRTCWeb\r\n4. Google+: https://plus.google.com/+WebRTC-Experiment\r\n5. Facebook: https://www.facebook.com/WebRTC\r\n\r\n## License\r\n\r\n[Conversation.js](https://github.com/muaz-khan/Conversation.js) is released under [MIT licence](https://www.webrtc-experiment.com/licence/) . Copyright (c) [Muaz Khan](https://plus.google.com/+MuazKhan).\r\n",
  "dist": {
    "shasum": "40edd359b6ec6764ee4bd1fa49eae0ba44fbce8c"
  },
  "_resolved": "https://registry.npmjs.org/conversationjs/-/conversationjs-1.0.0.tgz"
}
