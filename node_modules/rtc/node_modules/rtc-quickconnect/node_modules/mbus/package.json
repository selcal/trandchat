{
  "name": "mbus",
  "version": "2.0.0",
  "description": "If Node's EventEmitter and Eve were to have a child, it might look something like this",
  "main": "index.js",
  "scripts": {
    "test": "node test/all.js",
    "gendocs": "gendocs > README.md"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/DamonOehlman/mbus.git"
  },
  "stability": "unstable",
  "keywords": [
    "eventemitter",
    "emitter",
    "eve",
    "messagebus"
  ],
  "author": {
    "name": "Damon Oehlman",
    "email": "damon.oehlman@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/DamonOehlman/mbus/issues"
  },
  "homepage": "https://github.com/DamonOehlman/mbus",
  "dependencies": {},
  "devDependencies": {
    "tape": "^3.0.0"
  },
  "readme": "# mbus\n\nIf Node's EventEmitter and Eve were to have a child, it might look something like this.\nNo wildcard support at this stage though...\n\n\n[![NPM](https://nodei.co/npm/mbus.png)](https://nodei.co/npm/mbus/)\n\n[![unstable](https://img.shields.io/badge/stability-unstable-yellowgreen.svg)](https://github.com/dominictarr/stability#unstable) [![Build Status](https://img.shields.io/travis/DamonOehlman/mbus.svg?branch=master)](https://travis-ci.org/DamonOehlman/mbus) \n\n## Example Usage\n\nDisplayed below is a simple example:\n\n```js\nvar bus = require('mbus')();\n\nbus.on('foo.bar', function() {\n  console.log('foo.bar triggered');\n});\n\nbus('foo.bar');\n\n```\n\n__OUTPUT:__\n\n```\nfoo.bar triggered\n```\n\nAnother simple example demonstrates, how a message bus can be provided a parent message bus to relay messages to once after any local handlers have been invoked:\n\n```js\nvar bus = require('mbus')();\nvar foo = require('mbus')('foo', bus);\n\nbus.on('foo.bar', function() {\n  console.log('foo.bar triggered');\n});\n\nfoo.on('bar', function() {\n  console.log('foo triggered bar');\n});\n\nfoo('bar');\n\n```\n\n__OUTPUT:__\n\n```\nfoo triggered bar\nfoo.bar triggered\n```\n\n## Understanding Event Namespaces\n\nBy default, events are emitted with a dot delimited format which respects their lineage.  A good example of this is the second example shown above.\n\nIt is not mandatory for a child bus to add it's own namespace when events are invoked, however, as the bus can be created with an empty namespace:\n\n```js\nvar bus = require('mbus')();\nvar foo = require('mbus')('', bus);\n\nbus.on('bar', function() {\n  console.log('bar triggered at parent level');\n});\n\nfoo.on('bar', function() {\n  console.log('foo triggered bar');\n});\n\nfoo('bar');\n\n```\n\n__OUTPUT:__\n\n```\nfoo triggered bar\nbar triggered at parent level\n```\n\nThis can be very useful when you want to unify events into a single event bus but distribute their creation across a number of packages.\n\n## Event Feeds\n\nIn some situations, it is more desirable to get information on all the events that are passing through a bus rather than attempting to intercept individual events.  This behaviour can be done using mbus via the `feed` function:\n\n```js\nvar bus = require('mbus')();\nvar stopFeed = bus.feed(function(evt) {\n  console.log('received event name: ' + evt.name + ', with args: ', evt.args);\n});\n\n// trigger some events\nbus('foo', 'hello', 'there');\nbus('bar');\n\n// terminate the feed\nstopFeed();\n\n// won't be logged as the feed has been stopped\nbus('baz');\n\n```\n\n__OUTPUT:__\n\n```\nreceived event name: foo, with args:  [ 'hello', 'there' ]\nreceived event name: bar, with args:  []\n```\n\nAdditionally, feeds can be attached to a bus parent to capture namespaced events:\n\n```js\nvar bus = require('mbus')();\nvar foo = require('mbus')('foo', bus);\nvar stopFeed = bus.feed(function(evt) {\n  console.log('received event name: ' + evt.name + ', with args: ', evt.args);\n});\n\n// trigger some events\nfoo('bar', 'hello', 'there');\nfoo('baz');\n\n```\n\n__OUTPUT:__\n\n```\nreceived event name: foo.bar, with args:  [ 'hello', 'there' ]\nreceived event name: foo.baz, with args:  []\n```\n\n\n## Reference\n\n### `mbus(namespace?, parent?, scope?)`\n\nCreate a new message bus with `namespace` inheriting from the `parent`\nmbus instance.  If events from this message bus should be triggered with\na specific `this` scope, then specify it using the `scope` argument.\n\n### `mbus#clear()`\n\nReset the handler registry, which essential deregisters all event listeners.\n\n_Alias:_ `removeAllListeners`\n\n### `mbus#feed(handler)`\n\nAttach a handler function that will see all events that are sent through\nthis bus in an \"object stream\" format that matches the following format:\n\n```\n{ name: 'event.name', args: [ 'event', 'args' ] }\n```\n\nThe feed function returns a function that can be called to stop the feed\nsending data.\n\n### `mbus#off(name, handler)`\n\nDeregister an event handler.\n\n### `mbus#on(name, handler)`\n\nRegister an event handler for the event `name`.\n\n### `mbus#once(name, handler)`\n\nRegister an event handler for the event `name` that will only\ntrigger once (i.e. the handler will be deregistered immediately after\nbeing triggered the first time).\n\n## License(s)\n\n### MIT\n\nCopyright (c) 2014 Damon Oehlman <damon.oehlman@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "mbus@2.0.0",
  "dist": {
    "shasum": "f35602f76d7a5ae6e455b0713e2a8cd19eb132f4"
  },
  "_from": "mbus@^2.0.0",
  "_resolved": "https://registry.npmjs.org/mbus/-/mbus-2.0.0.tgz"
}
