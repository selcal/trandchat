{
  "name": "pull-ws",
  "version": "2.1.0",
  "description": "Simple pull-streams for websocket client connections",
  "main": "index.js",
  "stability": "unstable",
  "scripts": {
    "test": "node test/node.js",
    "browser": "testling"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/DamonOehlman/pull-ws.git"
  },
  "keywords": [
    "pull-stream",
    "websocket",
    "ws"
  ],
  "author": {
    "name": "Damon Oehlman",
    "email": "damon.oehlman@gmail.com"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/DamonOehlman/pull-ws/issues"
  },
  "homepage": "https://github.com/DamonOehlman/pull-ws",
  "devDependencies": {
    "mapleTree": "^0.5.1",
    "pull-stream": "^2.26.0",
    "tape": "^3.0.1",
    "testling": "^1.7.1",
    "ws": "^0.4.2",
    "wsurl": "^1.0.0",
    "pull-goodbye": "~0.0.1"
  },
  "dependencies": {
    "pull-core": "^1.0.0"
  },
  "testling": {
    "files": "test/all.js",
    "server": "test/server.js"
  },
  "readme": "# pull-ws\n\nA simple (but effective) implementation of a\n[`pull-stream`](https://github.com/dominictarr/pull-stream) `Source` and `Sink`\nthat is compatible both with native browser WebSockets and\n[`ws`](https://github.com/einaros/ws) created clients.\n\n\n[![NPM](https://nodei.co/npm/pull-ws.png)](https://nodei.co/npm/pull-ws/)\n\n[![unstable](https://img.shields.io/badge/stability-unstable-yellowgreen.svg)](https://github.com/dominictarr/stability#unstable) [![Build Status](https://img.shields.io/travis/DamonOehlman/pull-ws.svg?branch=master)](https://travis-ci.org/DamonOehlman/pull-ws) \n\n## Reference\n\n### `pws(socket, opts?)`\n\nturn a websocket into a duplex pull stream.\nIf provided, `opts` is passed to `pws.sink(socket, opts)`.\n\nWebsockets do not support half open mode.\n[see allowHalfOpen option in net module](\nhttp://nodejs.org/api/net.html#net_net_createserver_options_connectionlistener)\n\nIf you have a protocol that assumes halfOpen connections, but are using\na networking protocol like websockets that does not support it, I suggest\nusing [pull-goodbye](https://github.com/dominictarr/pull-goodbye) with your\nprotocol.\n\n### `pws.sink(socket, opts?)`\n\nCreate a pull-stream `Sink` that will write data to the `socket`.\n`opts` may be `{closeOnEnd: true, onClose: onClose}`.\n`onClose` will be called when the sink ends. If `closeOnEnd=false`\nthe stream will not close, it will just stop emitting data.\n(by default `closeOnEnd` is true)\n\nIf `opts` is a function, then `onClose = opts; opts.closeOnEnd = true`.\n\n```js\nvar pull = require('pull-stream');\nvar ws = require('pull-ws');\n\n// connect to the echo endpoint for test/server.js\nvar socket = new WebSocket('wss://echo.websocket.org');\n\n// write values to the socket\npull(\n  pull.infinite(function() {\n    return 'hello @ ' + Date.now()\n  }),\n  // throttle so it doesn't go nuts\n  pull.asyncMap(function(value, cb) {\n    setTimeout(function() {\n      cb(null, value);\n    }, 100);\n  }),\n  ws.sink(socket)\n);\n\nsocket.addEventListener('message', function(evt) {\n  console.log('received: ' + evt.data);\n});\n\n```\n\n### `pws.source(socket)`\n\nCreate a pull-stream `Source` that will read data from the `socket`.\n\n```js\nvar pull = require('pull-stream');\n\n// we just need the source, so cherrypick\nvar ws = require('pull-ws/source');\n\npull(\n  // connect to the test/server.js endpoint\n  ws(new WebSocket('ws://localhost:3000/read')),\n  pull.log()\n);\n\n```\n\n## License(s)\n\n### ISC\n\nCopyright (c) 2014, Damon Oehlman <damon.oehlman@gmail.com>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "pull-ws@2.1.0",
  "dist": {
    "shasum": "3eb95c48a01e25eb11f3ea170c7f2b69e20ecc60"
  },
  "_from": "pull-ws@^2.0.0",
  "_resolved": "https://registry.npmjs.org/pull-ws/-/pull-ws-2.1.0.tgz"
}
