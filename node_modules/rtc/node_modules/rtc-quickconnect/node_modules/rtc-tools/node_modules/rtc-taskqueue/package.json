{
  "name": "rtc-taskqueue",
  "version": "2.5.2",
  "description": "An asynchronous task queue that applies actions to an RTCPeerConnection in the most sensible order",
  "main": "index.js",
  "scripts": {
    "test": "browserify -t brfs test/all.js | broth start-$BROWSER | tap-spec",
    "gendocs": "gendocs > README.md"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/rtc-io/rtc-taskqueue.git"
  },
  "keywords": [
    "webrtc",
    "rtc.io",
    "RTCPeerConnection"
  ],
  "author": {
    "name": "Damon Oehlman",
    "email": "damon.oehlman@nicta.com.au"
  },
  "license": "Apache 2.0",
  "bugs": {
    "url": "https://github.com/rtc-io/rtc-taskqueue/issues"
  },
  "homepage": "https://github.com/rtc-io/rtc-taskqueue",
  "dependencies": {
    "mbus": "^2.0.0",
    "priorityqueuejs": "^1.0.0",
    "rtc-core": "^4.0.0",
    "rtc-sdp": "^1.1.0",
    "rtc-sdpclean": "^1.0.0",
    "rtc-validator": "^1.0.0",
    "whisk": "^1.1.0"
  },
  "devDependencies": {
    "brfs": "^1.4.0",
    "broth": "^1.1.0",
    "browserify": "^9.0.3",
    "rtc-core": "^4.0.0",
    "tap-spec": "^2.2.2",
    "tape": "^3.0.0",
    "travis-multirunner": "^2.0.9"
  },
  "testling": {
    "files": "test/all.js"
  },
  "contributors": [
    {
      "name": "Damon Oehlman",
      "email": "damon.oehlman@nicta.com.au",
      "url": "https://github.com/DamonOehlman"
    },
    {
      "name": "Silvia Pfeiffer",
      "email": "silvia.pfeiffer@nicta.com.au",
      "url": "https://github.com/silviapfeiffer"
    }
  ],
  "readme": "# rtc-taskqueue\n\nThis is a package that assists with applying actions to an `RTCPeerConnection`\nin as reliable order as possible. It is primarily used by the coupling logic\nof the [`rtc-tools`](https://github.com/rtc-io/rtc-tools).\n\n\n[![NPM](https://nodei.co/npm/rtc-taskqueue.png)](https://nodei.co/npm/rtc-taskqueue/)\n\n[![Build Status](https://img.shields.io/travis/rtc-io/rtc-taskqueue.svg?branch=master)](https://travis-ci.org/rtc-io/rtc-taskqueue) [![unstable](https://img.shields.io/badge/stability-unstable-yellowgreen.svg)](https://github.com/dominictarr/stability#unstable) \n\n## Example Usage\n\nFor the moment, refer to the simple coupling test as an example of how to use\nthis package (see below):\n\n```js\nvar test = require('tape');\nvar taskqueue = require('rtc-taskqueue');\nvar RTCPeerConnection = require('rtc-core/detect')('RTCPeerConnection');\nvar waitConnected = require('rtc-core/wait-connected');\nvar connections = [];\nvar queues = [];\nvar offerSdp;\nvar answerSdp;\n\n// require('cog/logger').enable('*');\n\ntest('can create connection:0', function(t) {\n  t.plan(1);\n  t.ok(connections[0] = new RTCPeerConnection({ iceServers: [] }));\n});\n\ntest('can create connection:1', function(t) {\n  t.plan(1);\n  t.ok(connections[1] = new RTCPeerConnection({ iceServers: [] }));\n});\n\ntest('can wrap the connections in queues', function(t) {\n  t.plan(2);\n  queues = connections.map(function(conn) {\n    return taskqueue(conn, {\n      sdpfilter: function(sdp) {\n        return sdp;\n      }\n    });\n  });\n\n  t.ok(queues[0]);\n  t.ok(queues[1]);\n});\n\ntest('connect icecandidate event listeners so candidates are exchanged', function(t) {\n  t.plan(1);\n  connections[0].onicecandidate = queues[1].addIceCandidate;\n  connections[1].onicecandidate = queues[0].addIceCandidate;\n  t.pass('applied');\n});\n\ntest('create a datachannel on connection:0 (required by moz)', function(t) {\n  t.plan(1);\n  connections[0].createDataChannel('test');\n  t.pass('created data channel');\n});\n\ntest('can create an offer using queue:0', function(t) {\n  t.plan(1);\n  queues[0].once('sdp.local', function(sdp) {\n    t.ok(sdp, 'got sdp');\n    offerSdp = sdp;\n  });\n\n  queues[0].createOffer();\n});\n\ntest('can setRemoteDescription on connection:1', function(t) {\n  t.plan(1);\n  queues[1].once('sdp.local', function(sdp) {\n    answerSdp = sdp;\n    t.ok(sdp, 'got sdp');\n  });\n\n  queues[1].setRemoteDescription(offerSdp);\n});\n\ntest('can setRemoteDescription on connection:0', function(t) {\n  t.plan(2);\n  waitConnected(connections[0], t.pass.bind(t, 'connection:0 connected'));\n  waitConnected(connections[1], t.pass.bind(t, 'connection:1 connected'));\n\n  queues[0].setRemoteDescription(answerSdp);\n});\n\n```\n\n## License(s)\n\n### Apache 2.0\n\nCopyright 2015 National ICT Australia Limited (NICTA)\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
  "readmeFilename": "README.md",
  "_id": "rtc-taskqueue@2.5.2",
  "dist": {
    "shasum": "3878b24d98e80b937d6722750cc25a61fdd2f8bb"
  },
  "_from": "rtc-taskqueue@^2.2.0",
  "_resolved": "https://registry.npmjs.org/rtc-taskqueue/-/rtc-taskqueue-2.5.2.tgz"
}
