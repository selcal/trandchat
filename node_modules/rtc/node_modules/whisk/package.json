{
  "name": "whisk",
  "version": "1.1.0",
  "description": "Functional operation helpers (underscore-like) for working with map, filter, reduce, etc",
  "main": "index.js",
  "scripts": {
    "test": "node test/all.js",
    "gendocs": "gendocs > README.md"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/DamonOehlman/whisk.git"
  },
  "keywords": [
    "underscore",
    "lodash",
    "functional",
    "selective"
  ],
  "author": {
    "name": "Damon Oehlman",
    "email": "damon.oehlman@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/DamonOehlman/whisk/issues"
  },
  "devDependencies": {
    "tape": "^2.12.3"
  },
  "readme": "# whisk\n\nWhisk is a collection of the functional operation helpers (underscore-like)\nfor working with map, filter, reduce, etc.\n\n\n[![NPM](https://nodei.co/npm/whisk.png)](https://nodei.co/npm/whisk/)\n\n[![Build Status](https://img.shields.io/travis/DamonOehlman/whisk.svg?branch=master)](https://travis-ci.org/DamonOehlman/whisk) \n\n## flatten\n\nFlatten an array using `[].reduce`\n\n```js\nvar flatten = require('whisk/flatten');\n\nconsole.log([1, [2, 3], 4, [5]].reduce(flatten));\n// --> [ 1, 2, 3, 4, 5 ]\n```\n\n## length\n\nGet the length of the target.\n\n```js\nvar length = require('whisk/length');\n\nconsole.log(length([1, 2, 3]));\n// --> 3\n\nconsole.log(length('Hello'));\n// --> 5\n\nconsole.log(['Hi', 'there'].map(length));\n// --> [ 2, 5 ]\n```\n\n## not\n\nDesigned to be used in combination with an `[].filter` the `not` function\ncan be used to exlude items from an array.\n\n```js\nvar not = require('whisk/not');\nvar items = ['a', 'b', 'c', 'd', 'e'];\n\nconsole.log(items.filter(not('a')));\n// --> [ 'b', 'c', 'd', 'e' ]\n\nconsole.log(items.filter(not(['a', 'b'])));\n// --> [ 'c', 'd', 'e' ]\n\nconsole.log(items.filter(not('a', 'b')));\n// --> [ 'c', 'd', 'e' ]\n```\n\n## nub\n\nReturn only the unique elements of the list.\n\n```js\nvar nub = require('whisk/nub');\n\nconsole.log(nub([ 1, 2, 3, 2, 3, 4 ]));\n// --> [ 1, 2, 3, 4 ]\n\nconsole.log(nub([ 'red', 'blue', 'red' ]));\n// --> [ 'red', 'blue' ]\n\nconsole.log(nub([ 4, 6, 6, 8, 3, 4, 1 ]));\n// --> [ 4, 6, 8, 3, 1 ]\n```\n\n## pluck\n\nExtract targeted properties from a source object. When a single property\nvalue is requested, then just that value is returned.\n\nIn the case where multiple properties are requested (in a varargs calling\nstyle) a new object will be created with the requested properties copied\nacross.\n\n__NOTE:__ In the second form extraction of nested properties is\nnot supported.\n\n```js\nvar pluck = require('whisk/pluck');\nvar people = [\n  { name: 'Bob', age: 35, address: { country: 'Australia' } },\n  { name: 'Thelma', age: 32, address: { country: 'New Zealand' } },\n  { name: 'Roger', age: 50, address: { country: 'Fiji' } }\n];\n\nconsole.log(people.map(pluck('name')));\n// --> [ 'Bob', 'Thelma', 'Roger' ]\n\nconsole.log(people.map(pluck('address.country')));\n// --> [ 'Australia', 'New Zealand', 'Fiji' ]\n\nconsole.log(people.map(pluck('name', 'age')));\n// --> [ { name: 'Bob', age: 35 }, { name: 'Thelma', age: 32 }, { name: 'Roger', age: 50 } ]\n```\n\n## range\n\nCreate an array of elements from x -> y (inclusive)\n\n```js\nvar pluck = require('whisk/range');\n\nconsole.log(range(0, 3));\n// --> [ 0, 1, 2, 3 ]\n```\n\n## sum\n\nSum an input array of values\n\n```js\nvar sum = require('whisk/sum');\nvar range = require('whisk/range');\n\nconsole.log(sum([1, 2]));\n// --> 3\n\nconsole.log(sum(range(1, 10)));\n// --> 55\n\nconsole.log([1, 2].reduce(sum));\n// --> 3\n\nconsole.log(range(1, 10).reduce(sum));\n// --> 55\n\n```\n\n## times\n\nCreate an element of arrays that can be iterated over n times:\n\n```js\nvar times = require('whisk/times');\n\ntimes(3).forEach(function() {\n  console.log('hello world');\n});\n\n// --> hello world\n// --> hello world\n// --> hello world\n\n```\n\n## zip\n\nzip one array with other arrays\n\n```js\nvar zip = require('whisk/zip');\n\nconsole.log([1, 2, 3].map(zip(['a', 'b', 'c'])));\n// --> [ [1, 'a'], [2, 'b'], [3, 'c'] ]\n\nconsole.log([1, 2, 3].map(zip(['a', 'b', 'c'], ['x', 'y', 'z'])));\n// --> [ [1, 'a', 'x'], [2, 'b', 'y'], [3, 'c', 'z'] ]\n```\n\n### zip todo\n\n- tests\n\n## License(s)\n\n### MIT\n\nCopyright (c) 2014 Damon Oehlman <damon.oehlman@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "whisk@1.1.0",
  "dist": {
    "shasum": "7ec6ede0c2f0c0859308fc9803ae2a94b965a2d9"
  },
  "_from": "whisk@^1.0.0",
  "_resolved": "https://registry.npmjs.org/whisk/-/whisk-1.1.0.tgz"
}
